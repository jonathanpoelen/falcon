little_endian et big_endian non vérifier
number.hpp pas finalisée
voir les TODO et NOTE de endian.hpp

fonction de construction par lot voir bits/stl_uninitialized.h et bits/stl_construct.h (+implementation qui ne fait pas de destruction en passant par exemple un no_garbage_collector_t ou en indiquand dans le nom uninitialized_without_garbage_collector qui retourne un objet avec l'exceptions ou non et l'iterator de fin). fichier à mettre dans memory. Trouver un autre nom que garbage_collector.

rendre operators.hpp un peu compatible c++89

modifier CPP0X_PROTO et CPP0X_DELEGATE_FUNCTION pour que le second argument soit une expression. Donc CPP0X_PROTO(f(char), (int)), CPP0X_DELEGATE_FUNCTION(f(char c), (c+8)). Faire un CPP0X_PROTO_EXPR qui fait comme CPP0X_DELEGATE_FUNCTION mais avec juste le prototype.

enlever les macros variable et passer par __VA_ARGS__

objet optimiser pour la conversion de chiffre en chaine numeric_string<TypeInt, CharT, CharTraits>. Notamment pour ce qui est de l'incrementation de chaine (et l'incrementation répercuter en general (ex: unite puis dizaine, etc)). pouvoir utilisé des char* ou std::string. Le CharTraits fait l'affaire ? faire un typedef pour le c et wchar en string ou non. (cnumeric_string, cnumeric_wstring, numeric_string, numeric_wstring). Le type char* peut fonctionner avec unique_ptr. Laisser à l'utilisateur choisir le container de stockage (on boucle dessus avec infinite_iterator pour écrire les chiffres)

iota(begin(), end(), first_value): le faire avec iota(container, first_value)

flag.hpp: doit possèder un constructeur avec avec initializer_list.
flag<>::operator[n] : bit_flag<> ? bit_wrapper<_T>{_T*} ?
enlever la hack qui permet une fonction consexpr en n'utilisant pas de boucle. C++14 permet les fonctions constexpr avec des boucles. Nouvelle macro ?

optimiser recursive_iterator (et l'algo de recursion) pour les tableaux. En partant du principe que a[x][y] = a[x*y] ne faire qu'une boucle

faire un algorithmfwd.hpp pour bien nommer les champs

optimisation de taille des enum class: enum class E : typename std::conditional<l.size() == 2, bool, int>::type {…}; (minimal_int<>::type ?)

Mettre constexpr pour les classe d'operateur et enum/operator

ajouter le calcul (A+(B-1))/B qui permet de calculer le nombre requis de B pour mettre A (equivalent à A/B+(A%B?1:0) qui est le plus rapide ? le compilateur gènére le même code ? optimisation ?). quotient partiel.

revoir btree et btree_base et réactiver les tests

faire des traits char_traits qui transforme tout en majuscule, en minuscule et élimine les accents. Faire un string qui fait des comparaisons insensibles à la case. Quel char_traits existe-il dans boost ?

ne pas oublier le suport de char16_t et char32_t

le hash dans basic_cstring a externaliser dans un hash.hpp. Faire un hash_byte() comme la std.

mettre tous les operator()(...) des foncteurs en const (si cela est possible).

basic_string_repetition<_String>{_String, size_t} ? (os << string_repetition('a', 4) -> "aaaa"). faire std::to_string()

ostream::repetition(_Obj, size_t) et ostream::repetition(_Obj, size_t, _CharT separator) ; avec _CharT = _Obj::char_type. Idem pour les ostream

si on active les exceptions des flux, comment ce comporte les fonctions lié (ignore, ignore_all, etc) ? Le state est bien setter à badbit et non égal à good.

ajouter les typedef result_type, argument_type, first_argument_type et second_argument_type -quand possible- dans les classes de operators.hpp. Faire un not1 et not2 comme la std.

structure englopant un type et pour chaque operateur suceptible de changer le type (pour les type scalaire < int) fait un static_cast. (force_type<_T> ? force_type_wrapper<> ? force_scalar<> ? integral_wrapper<> ?). Cas particulier pour l'incrementation et decrementation sur enum.
Permet ainsi de s'affranchir des enum_* en passant par les foncteurs sur operateurs: enum_plus<enum_t> -> plus<integral_wrapper<enum_t>>, enum_increment<enum_t> -> increment<integral_wrapper<enum_t&>>
ajouter le keyword enum pour enum/operators.hpp ou étendre une classe au nom plus générique qui fait un cast pour les opérations arithmétique ou binaire (plus_conversion, etc ?). La classe generique heriter des operateurs de la façon décrit au-dessus.

amélioré algorithm.hpp en "optimisant" les algos quand possible (nottament quand directement utilisé avec un container). std::remove(s.begin(), s.end(), ',') copie inutile de caractères jusqu'à la première occurence trouvé (vraiment !?). falcon::remove(s, ',') cherche la première occurence (std::find) puis utilise std::remove.

singleton<_T> qui utilise static_new. Peut-être un singleton_id<_T, _Id>. Voir aussi call_once

les lambdas toujours par reference ou il faut parfois utiliser std::ref ? Pas le cas pour while_loop et co...

faire un make_parameter_adapter() et un make_tuple_applier().

temporary_tuple_cat (tuple concatener par reference ? tuple_cat_reference)

tuple_organizer<_Tag, bool no_tuple_parameter_is_tuple = true> pour faire une agglomération de tuple et filtrer les éléments non voulut. tuple_organizer<_Functor, _Tag> avec _Tag parameter-tag, parameter_index<> ou wrapper avec organizer_for_each_tag (ex organizer_for_each_tag<_Tag>) qui va s'appliquer indépendament sur chaque tuple. Passer par un traits pour faire appliquer ces tags: organizer_tag_to_parameter_index<_Tag, _Tuples>::type

les tuple_* doivent fonctionner avec std::pair<>/std::array<>, faire des tests

unary_compose, binary_compose et mulary_compose doivent supporter falcon::ignore_t quand on les construits

dans enumerator faire une allocation de la chaîne en tant que expression constante (déjà fait ?)

support des enumeration à valeur aléatoire dans enumerator.hpp

tester les compose() avec les distributions (voir random_device ? (exemple dans cppreference.com avec les distributions))

strong_reference_wrapper: faire des tests

enlever les doubles underscore car reservé. Idem pour les underscores suivit de majuscule dans l'espace globale.

Vérifier les types tag dans les iterateurs.
Ajouter dans les iterators les fonctions pour acceder aux fonctorx lorsque ceux-ci en utilisent (fn() ?).

algorithm.hpp : ne prend pas en compte les containers constant…

tuple_get_accessor → get_idx_accessor ? get_index_accessor ?

late_delegation<_FunctorTemplate, _FunctorAllocator = always<> > -> operator(…) { return _FunctorAllocator(…) } ; _FunctorAllocator -> return _ClassTemplate<_T>()

ajouter PP dans les macros de preprocessor (FALCON_CAT ⇒ FALCON_PP_CAT) qui sera remplacé par BOOST_PP_CAT

tuple_*: ignorer les valeurs de type std::ignore_t. Les fonctions retournant void voient leur type changer en std::ignore_t.

literal/utility.hpp: support de la convertion de flottant et faire le support de l'hexadecimal et octal pour les integrals et l'hexadecimal pour les flottants (voir pdf plus bas pour les suffix).
implémenter la proposition de suffix dans la nouvelle norme: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3402.pdf
ne pas oublier de prendre en compte les unités (non mis dans la norme) avec les abréviations udl ou iso

modifier les noms des macro CPP1X_* et CPP_* en FALCON_* (et FALCON_CXX1X_ ?)
#define FALCON_STATIC_CONSTEXPR static FALCON_CONSEXPR_OR_CONST
utilisé les macros prédéfinit dans boost
www.boost.org/doc/libs/1_49_0/libs/config/doc/html/boost_config/boost_macro_reference.html

node/*.hpp: peuvent fonctionner de façon transparente avec des std::unique_ptr ?

utiliser optimal_tuple dans recursive_iterator

revoir les java_iterator pour faire un heritage sur un java_iterator_handler comme pour les iterators. Supprimer {java_,}iterator/detail et type_traits/is_java_iterator.hpp
changer le nom des java_iterator en range_iterator et merger les fonctions make_range_iterator et range_iterator
Renommer les java_iterator (range_iterator ?)

peut-on supprimer les constructeurs de copie et l'affectation dans les iterateurs sans que cela crée des copies ? il faudra surement faire un move ctor et un move copy

preprocessor/move.hpp -> c++/move.hpp ?

faire un range qui prend des iterateur pour creer un container_wrapper et être utiliser avec for(auto& v:range(it, it+3)). ainsi qu'un ref_range qui ne va pas copier le first et end mais prendre des references (sauf end si rref). Un make_container_wrapper en fait (crange et reverse_crange?)

mettre des rref quand un foncteur est demander dans les fonctions (tuple_assign, etc)

tableau 2 dimensions allouer comme 1 de la forme:
int **pptr = malloc(x * sizeof(int*) + y * x * sizeof(int));
int *ptr = (int*)(pptr) + y * sizeof(int*);
for (i = 0; i != y; i++)
	pptr[i] = ptr + i * x;
//pptr[x][y]
et tableau n dimension allouer comme 1 et p[x*y]

istream/operators.hpp: enlever la parties sur les char * ou à mettre dans un namespace idem pour le tableau d'objet. Il n'y a pas de verification du nombre inseré...

fonction pour simplifier les operations sur buffer (renvoit false si eof):
	snextc: bool snextc(buffer, &c)
	sputc: bool sputc(buffer, c)
	sputn: bool sputn(buffer, s, n)
	sgetn: bool sgetn(buffer, s, n)
	sgetc: bool sgetc(buffer, &c)
	ios/streambuf.hpp
intrusive data stream (eback, gptr, egptr, pbase, pptrm epptr). Retourne les valeurs interne de ces pointeurs (mettre dans ios/)

tuple/detail/operateurs.hpp ? -> tuple/tuple_manip.hpp : et implementation pour tout qui se comporte comme un tuple

classe wrapper pour __m128, __m128d, __m256, __m256d et autres type de (/usr/lib/gcc/x86_64-linux-gnu/4.7/include/{avxintrin,avx2intrin,emmintrin,xmmintrin,...}.h). (header different pour vs++ ?). Voir boost.simd

basic_string_reference<String>(String&, start, size)
string_reference=basic_string_reference<std::string>
cstring fonctionnant sur pile (alloue un tableau de char (fixed_string?)). Hérite de cstring (private/protected). Implémenter à travers cstring par un CharT = char_type<N, CharT = char> ? (changer le nom de char_type)

local_pool_allocator: non thread save. pointeur sauvegarder sous forme de tableau (la copie partage le même storage)
global_pool_allocator: non thread save. pointeur sauvegarder sous forme de tableau static
pool_allocator: un global_pool_adapter qui utilise des mutex si besoin
les mêmes allocateur (de pool) mais qui sont utilisé avec scoped_adapter_allocator pour faire des pools sur un ensemble de container

support des non exceptions (retourne 0 au lieu de bad_alloc). Flag -fno-exceptions pour gcc. Utiliser la macro BOOST_NO_EXCEPTIONS dans boost/config.hpp

implementation de simple signal

utilisé FALCON_EMPTY (BOOST_EMPTY ?) pour arguments vide de macro

faire en sorte que enumerator ne dépende plus de __VA_ARGS__ (ou séparer la partie qui en dépend).

trouver un autre nom pour static_new

dans les allocateur, ajouter un constructeur qui prend le parent en argument (const& et rvalue).

shared_allocator. Par exemple shared_allocator<free_list_allocator> partage tous le même allocateur. Moyen de le faire avec un scoped_adapter_allocator ?

iterator comme zone mais dans différentes direction: http://www.thonky.com/qr-code-tutorial/module-placement-matrix/#pattern-of-placement. Renommer zonne_iterator ?

renommer container_wrapper en sequence_wrapper ?

vector avec fonction de redirection d'indice (type template). Permet par exemple un vecteur 2D (avec en template la fonction/wrapper coord()).

move semantique pour class_property + property read_only + operator= pour éviter de passer par un cast implicit quand il n'y a pas de getter.

dans les rbegin, rend pour les tableaux. utiliser un opposite_iterator ?

parameter/manip.hpp: séparer chaque fonctionnalite dans des fichier separer et ajouter pop_back et pop_front. Avec une posibilité de retourné un type (plutot  qu'une erreur de compile) quand le pack est vide

mpl (comme boost) mais qui utilise parameter_pack et co

faire les helper type: `template<...> xxx_t = typename xxx<...>::type` et les macros pour aider à leur construction: FALCON_HELPER_TYPE_2_DEF(name, T, U)

concat supporte de recevoir des nombres est reserve une taille max + utilise to_string.

to_cstring/to_const_cstring et des fonctions concat et append qui retourne un cstring.

Faire un to_string, to_cstring et to_const_cstring qui supporte plusieurs valeurs et les transforme en [c]string. Si prend un paramètre qui est une référence sur leurs types de retour alors le retourne par référence. Changer le nom pour les différencier de to_string (variables_to_string ?).

refaire une passe de l'ensemble des fichiers de functional/ et tuple/ pour eliminer les foncteurs non constant et alleger le code. (surtout parameter_index_adapter)

mettre en noexcept les constructeur qui peuvent l'être

ajout de ioflag() pour les flux. ioflag<std::ios::hex>(42) et ioflag<=void>(42, std::ios::hex). Permet de mettre un flag juste pour un type.

faire une classe ostream::format() simple (format("%1 %2")(2,34)). ainsi que putf("%1",42). format préévalue les positions alors que puts ajoute à la volée (plus rapide ?)
http://code.google.com/p/nicola-bonelli-repo/source/browse/trunk/codes.cpp0x/print.hpp?spec=svn612&r=612

au niveau des construct() faire un cast à la porc pour transformer les tableau[x][y] en tableau [x*y] (et plus de dimension évidement)

un basic_stringbuf qui ne fait pas de copie de string (donc non sûr ?). Un basic_stringbuf qui fonctionne avec des cstring (et donc non sûr car ne fait de copie) et basic_stringbuf avec une taille limiter (utilise cstring mais fait une copie quand str() est utilisé). Ces 3 streambuf peuvent avoir une base commune. Le basic_stringbuf avec une taille limitée peut être implémenté un constructeur qui utilise setp avec une donnée fournit par l'extrieur: struct basic_limitbuf: public std::streambuf{
  basic_limitbuf(char *buffer, size_t size)
  { this->setp(buffer,buffer+size); }
  char *end()
  { return this->pptr(); }
};
le basic_stringbuf qui ne copie pas de string peut être remplacer par un range (sous forme de cstring) recuperer via les intrusive data stream (mieux)
le basic_stringbuf avec cstring peut être fait sous forme d'un basic_stringbuf avec un allocator spécial pour que std::string soit en réaliter un cstring (ajoute cette spécification dans basic_cstring.hpp)

un iorepeat. Optimisation pour les type scalaires en fessant un to_string (avec la local et autre paramètre)

les fonction de flux entrant doivent pouvoir recevoir des modifiers

optimiser get_tuple pour que le separator soit une chaîne si ce n'est pas le cas (voir put_tuple et intrusive stream)

le namespace detail et publique et permet la surcharge des traits (qui sont enlever de leur qualifier dans le namespace falcon). le namespace __private contient ceux qui ne doit pas être utilisé par l'extérieur.

sequence_queue, sequence_priority_queue (permet de récupérer le container interne)

dichotomic_find et dichotomic_find_if recherche jusqu'à la fin lorsque std::find est utilisé. Faire un dichotomic_upper

flat_map et flat_multimap avec strategie pour la réorganisation des elements (deplacement de tous ou juste des dernier element). Idem pour flat_set et flat_multiset

Changer les interfaces de templates/*.hpp. Mettre des constexpr quand-il faut.

un flux qui fonctionne comme stringstream mais prend en référence le container à aggrandir ???<Container, Pusher = back_insert>









