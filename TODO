fonction de construction par lot voir bits/stl_uninitialized.h et bits/stl_construct.h (+implementation qui ne fait pas de destruction en passant par exemple un no_garbage_collector_t ou en indiquand dans le nom uninitialized_without_garbage_collector qui retourne un objet avec l'exceptions ou non et l'iterator de fin). fichier à mettre dans memory. Trouver un autre nom que garbage_collector.

modifier CPP0X_PROTO et CPP0X_DELEGATE_FUNCTION pour que le second argument soit une expression. Donc CPP0X_PROTO(f(char), (int)), CPP0X_DELEGATE_FUNCTION(f(char c), (c+8)). Faire un CPP0X_PROTO_EXPR qui fait comme CPP0X_DELEGATE_FUNCTION mais avec juste le prototype.

objet optimiser pour la conversion de chiffre en chaine numeric_string<TypeInt, CharT, CharTraits>. Notamment pour ce qui est de l'incrementation de chaine (et l'incrementation répercuter en general (ex: unite puis dizaine, etc)). pouvoir utilisé des char* ou std::string. Le CharTraits fait l'affaire ? faire un typedef pour le c et wchar en string ou non. (cnumeric_string, cnumeric_wstring, numeric_string, numeric_wstring). Le type char* peut fonctionner avec unique_ptr. Laisser à l'utilisateur choisir le container de stockage (on boucle dessus avec infinite_iterator pour écrire les chiffres)

optimiser recursive_iterator (et l'algo de recursion) pour les tableaux. En partant du principe que a[x][y] = a[x*y] ne faire qu'une boucle

optimisation de taille des enum class: enum class E : typename std::conditional<l.size() == 2, bool, int>::type {…}; (minimal_int<>::type ?)

Mettre constexpr pour les classe d'operateur et enum/operator

ajouter le calcul (A+(B-1))/B qui permet de calculer le nombre requis de B pour mettre A (equivalent à A/B+(A%B?1:0) qui est le plus rapide ? le compilateur gènére le même code ? optimisation ?). quotient partiel.

revoir btree et btree_base et réactiver les tests

faire des traits char_traits qui transforme tout en majuscule, en minuscule et élimine les accents. Faire un string qui fait des comparaisons insensibles à la case. Quel char_traits existe-il dans boost ?

ne pas oublier le suport de char16_t et char32_t

mettre tous les operator()(...) des foncteurs en const (si cela est possible).

basic_string_repetition<_String>{_String, size_t} ? (os << string_repetition('a', 4) -> "aaaa"). faire std::to_string()

ostream::repetition(_Obj, size_t) et ostream::repetition(_Obj, size_t, _CharT separator) ; avec _CharT = _Obj::char_type. Idem pour les ostream

si on active les exceptions des flux, comment ce comporte les fonctions lié (ignore, ignore_all, etc) ? Le state est bien setter à badbit et non égal à good.

ajouter les typedef result_type, argument_type, first_argument_type et second_argument_type -quand possible- dans les classes de operators.hpp. Faire un not1 et not2 comme la std.

structure englopant un type et pour chaque operateur suceptible de changer le type (pour les type scalaire < int) fait un static_cast. (force_type<_T> ? force_type_wrapper<> ? force_scalar<> ? integral_wrapper<> ?). Cas particulier pour l'incrementation et decrementation sur enum.
Permet ainsi de s'affranchir des enum_* en passant par les foncteurs sur operateurs: enum_plus<enum_t> -> plus<integral_wrapper<enum_t>>, enum_increment<enum_t> -> increment<integral_wrapper<enum_t&>>
ajouter le keyword enum pour enum/operators.hpp ou étendre une classe au nom plus générique qui fait un cast pour les opérations arithmétique ou binaire (plus_conversion, etc ?). La classe generique heriter des operateurs de la façon décrit au-dessus.

singleton<_T> qui utilise static_new. Peut-être un singleton_id<_T, _Id>. Voir aussi call_once

temporary_tuple_cat (tuple concatener par reference ? tuple_cat_reference)

tuple_organizer<_Tag, bool no_tuple_parameter_is_tuple = true> pour faire une agglomération de tuple et filtrer les éléments non voulut. tuple_organizer<_Functor, _Tag> avec _Tag parameter-tag, parameter_index<> ou wrapper avec organizer_for_each_tag (ex organizer_for_each_tag<_Tag>) qui va s'appliquer indépendament sur chaque tuple. Passer par un traits pour faire appliquer ces tags: organizer_tag_to_parameter_index<_Tag, _Tuples>::type

les tuple_* doivent fonctionner avec std::pair<>/std::array<>, faire des tests

unary_compose, binary_compose et mulary_compose doivent supporter falcon::ignore_t quand on les construits

dans enumerator faire une allocation de la chaîne en tant que expression constante (déjà fait ?)

support des enumeration à valeur aléatoire dans enumerator.hpp

tester les compose() avec les distributions (voir random_device ? (exemple dans cppreference.com avec les distributions))

strong_reference_wrapper: faire des tests

enlever les doubles underscore car reservé. Idem pour les underscores suivit de majuscule dans l'espace globale.

Vérifier les types tag dans les iterateurs.
Ajouter dans les iterators les fonctions pour acceder aux fonctorx lorsque ceux-ci en utilisent (fn() ?).

late_delegation<_FunctorTemplate, _FunctorAllocator = always<> > -> operator(…) { return _FunctorAllocator(…) } ; _FunctorAllocator -> return _ClassTemplate<_T>()

ajouter PP dans les macros de preprocessor (FALCON_CAT ⇒ FALCON_PP_CAT) qui sera remplacé par BOOST_PP_CAT

tuple_*: ignorer les valeurs de type std::ignore_t. Les fonctions retournant void voient leur type changer en std::ignore_t.

literal/utility.hpp: support de la convertion de flottant et faire le support de l'hexadecimal et octal pour les integrals et l'hexadecimal pour les flottants (voir pdf plus bas pour les suffix).
implémenter la proposition de suffix dans la nouvelle norme: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3402.pdf
ne pas oublier de prendre en compte les unités (non mis dans la norme) avec les abréviations udl ou iso

modifier les noms des macro CPP1X_* et CPP_* en FALCON_* (et FALCON_CXX1X_ ?)
#define FALCON_STATIC_CONSTEXPR static FALCON_CONSEXPR_OR_CONST
utilisé les macros prédéfinit dans boost
www.boost.org/doc/libs/1_49_0/libs/config/doc/html/boost_config/boost_macro_reference.html

node/*.hpp: peuvent fonctionner de façon transparente avec des std::unique_ptr ?

utiliser optimal_tuple dans recursive_iterator

peut-on supprimer les constructeurs de copie et l'affectation dans les iterateurs sans que cela crée des copies ? il faudra surement faire un move ctor et un move copy

preprocessor/move.hpp -> c++/move.hpp ?

tableau 2 dimensions allouer comme 1 de la forme:
int **pptr = malloc(x * sizeof(int*) + y * x * sizeof(int));
int *ptr = (int*)(pptr) + y * sizeof(int*);
for (i = 0; i != y; i++)
	pptr[i] = ptr + i * x;
//pptr[x][y]
et tableau n dimension allouer comme 1 et p[x*y]

istream/operators.hpp: enlever la parties sur les char * ou à mettre dans un namespace idem pour le tableau d'objet. Il n'y a pas de verification du nombre inseré...

fonction pour simplifier les operations sur buffer (renvoit false si eof):
	snextc: bool snextc(buffer, &c)
	sputc: bool sputc(buffer, c)
	sputn: bool sputn(buffer, s, n)
	sgetn: bool sgetn(buffer, s, n)
	sgetc: bool sgetc(buffer, &c)
	ios/streambuf.hpp

classe wrapper pour __m128, __m128d, __m256, __m256d et autres type de (/usr/lib/gcc/x86_64-linux-gnu/4.7/include/{avxintrin,avx2intrin,emmintrin,xmmintrin,...}.h). (header different pour vs++ ?). Voir boost.simd

basic_string_reference<String>(String&, start, size)
string_reference=basic_string_reference<std::string>
cstring fonctionnant sur pile (alloue un tableau de char (fixed_string?)). Hérite de cstring (private/protected). Implémenter à travers cstring par un CharT = char_type<N, CharT = char> ? (changer le nom de char_type)
voir std::string_view

local_pool_allocator: non thread save. pointeur sauvegarder sous forme de tableau (la copie partage le même storage)
global_pool_allocator: non thread save. pointeur sauvegarder sous forme de tableau static
pool_allocator: un global_pool_adapter qui utilise des mutex si besoin
les mêmes allocateur (de pool) mais qui sont utilisé avec scoped_adapter_allocator pour faire des pools sur un ensemble de container

support des non exceptions (retourne 0 au lieu de bad_alloc). Flag -fno-exceptions pour gcc. Utiliser la macro BOOST_NO_EXCEPTIONS dans boost/config.hpp

faire en sorte que enumerator ne dépende plus de __VA_ARGS__ (ou séparer la partie qui en dépend).

trouver un autre nom pour static_new

dans les allocateur, ajouter un constructeur qui prend le parent en argument (const& et rvalue).

shared_allocator. Par exemple shared_allocator<free_list_allocator> partage tous le même allocateur. Moyen de le faire avec un scoped_adapter_allocator ?

iterator comme zone mais dans différentes direction: http://www.thonky.com/qr-code-tutorial/module-placement-matrix/#pattern-of-placement. Renommer zonne_iterator ? std::array_view suffit ?
zone_access est vraiment utile maintenant qu'il y std::array_view ?

vector avec fonction de redirection d'indice (type template). Permet par exemple un vecteur 2D (avec en template la fonction/wrapper coord()). Voir std::array_view

move semantique pour class_property + property read_only + operator= pour éviter de passer par un cast implicit quand il n'y a pas de getter.

parameter/manip.hpp: séparer chaque fonctionnalite dans des fichier separer et ajouter pop_back et pop_front. Avec une posibilité de retourné un type (plutot  qu'une erreur de compile) quand le pack est vide. Utilisé les class dans mpl/detail

mpl (comme boost) mais qui utilise parameter_pack et co

faire les helper type: `template<...> xxx_t = typename xxx<...>::type` et les macros pour aider à leur construction: FALCON_HELPER_TYPE_2_DEF(name, T, U)

concat supporte de recevoir des nombres est reserve une taille max + utilise to_string.

to_cstring/to_const_cstring et des fonctions concat et append qui retourne un cstring ou fixed_string.

Faire un to_string, to_cstring et to_const_cstring qui supporte plusieurs valeurs et les transforme en [c]string. Si prend un paramètre qui est une référence sur leurs types de retour alors le retourne par référence. Changer le nom pour les différencier de to_string (variables_to_string ?).

mettre en noexcept les constructeurs et fonctions qui peuvent l'être

un iorepeat. Optimisation pour les type scalaires en fessant un to_string (avec la local et autre paramètre)

le namespace detail est publique et permet la surcharge des traits (qui sont enlever de leur qualifier dans le namespace falcon). le namespace aux contient ceux qui ne doit pas être utilisé par l'extérieur (namespace privée).

sequence_queue, sequence_priority_queue (permet de récupérer le container interne)

Changer les interfaces de templates/*.hpp. Mettre des constexpr quant-il faut.

faire un hash constexpressive spécialisé pour cstring en C++14.

faire des fonctions spéciliasées pour retourner des objets ou faire des algos constexpressive en c++14 pour cstring et format.
https://github.com/cppformat/cppformat
string format(local, str, ...)
istream& format(istream, str, ...)
ostream& format(ostream, str, ...)
void format(streambuf, str, ...)
string format(str, ...)
+ classe qui sauvegarde l'état de parsing

C++14: utilisé integer_sequence à la place de parameter_index.

faire des traits parameter des classes génériques (tous type template (voir mpl/detail/s_*))

mpl: initialiser par défaut les attributs avec un arg<>
mpl: or + is_arg -> contains_arg ou s_contains<pack<>, is_arg>

construct de tableau -> utiliser l'alignement plutôt qu'une méthode récursive pour l'initialisation.

literal/units.hpp: unité déjà définit dans ratio. inversion zette/zepta et elles n'y sont pas toute. Attention 4 valeurs existe uniquement si l'architecture le permet (voir http://en.cppreference.com/w/cpp/numeric/ratio/ratio)

mettre des namespace pour les composants des literaux

dans les constructeurs de mouvement, vérifier qu'il ne soit pas fait sur lui même. Peut être dangereux dans le cas d'allocation dynamique.

Dans les parametres par rvalue, des move sont utilisées pour les attributs plutôt que des forward ? Concerne surtout les move ctor

Certaine classe implémente un ctor template et redéfinissent les constructeurs de copie. Pas besoin si le ctor templaté ajoute en plus un disable_if_same_or_derived<type_class, U>

template<typename T, typename U>
using disable_if_same_or_derived =
  typename std::enable_if<
    !std::is_base_of<T,typename
          std::remove_reference<U>::type
    >::value
  >::type;

algorithm.hpp -> faire un namespace range qui contient les algos (dossier range/algorithm/). Déplacer certain fichier/classe de itérateur pour les mettre dans ce nouveau dossier.

ajout de -pedantic à la compilation (il y a des erreurs dans enumerator.hpp et preprocessor/variadic/* (aucun parametres envoyer dans un pack))

build_parameter_index_t -> make_parameter_index

coordinates -> coordinate (modifier également le namespace ou le nom des fonctions/classes)

un tableau de taille fixe à plusieurs dimension aplati (flat_array<T, size_t...> ? (un dynamique un statique)). accer avec [{...}], [x][y]. le mode initializer retourne soit le type soit un wrapper de sous ensemble soit une erreur car trop d'index. Ajout un accer operateur parenthese qui retourne une valeur. mettre un to_array qui retourne un std::array en reference (cast à l'arrache) (voir std::array_view)

split operators dans plein de fichier (1 opérateur par fichier). Idem pour celui sur les enum, idem pour les algorithm/range

renommer build_class en make_type, build_type, make_of ou autre

pas de namespace iterator

http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/#mailing2014-01 (entre autre l'implémentation de apply_tuple (apply_from_tuple dans le standars))

natsort compare + avec locale (voir implémentation de martin pool (lien dans la doc php de natsort) et aussi en javascript dans katepart commands/utils.js)
char_trait insentive case (ci_char_trait). Note et boost ?

adaptater -> view ? Pas pour tous. Les transformer en vues si possible

range_allocator fonctionnel avec std::set (ou autre) ?

fixed_grid_cross, grid_cross -> grid_cross_view

allocator qui alloue plusieurs bloc.

max_size dans les allocateurs est le nombre max d'element que alloc() peut théoriquement faire.

pas besoin de swap si move constructeur/assignement

faire de certaines fonctions libres des foncteurs en constexpr

pour les foncteurs pris en rvalue, utiliser forward avant l'appel. (parce que ref qualifier: int f()&&)

synchroniser_iterator fonctionne bien au niveau des tag ? Comment est verifier les valeurs des iterateur par defaut ? (tous, 1 ?). Ajouter des tests avec des iterateurs de taille different et regarder si ne deborde pas

const parameter_index & -> parameter_index

suffixer les types des foncteurs variable avec _fn plutôt que _t ?

deplacer certain header de math dans logical

un objet mutable avec tous les operators (cast implicite pour ne pas tous les faire)

dynamic_callback avec range. Autre fonction ? paramètres supplémentaire au début qui représente des indices ou des ranges ?

un objet qui créer un arbre de condition dichtomique xxx(yyy(value_ref, f),...)

les maker en foncteur ?

tuple_apply -> apply_from_tuple

c++1x/syntax.hpp -> delegate_function.hpp et enlever les includes

macro pour créer les fonctions de comparaisons !=, >, <=, >=
macro pour créer les operateurs arithmetique +, -, /, %, *
macro pour créer les operateurs bitwise &, |, ^, <<, >>
macro pour créer les operateurs de post incrementation et post decrementation

simplifier arg/* en utilisant les types parameter et autres

fake_container qui definit les protos et les types des containers standars (fake_container + fake_associative_container ? fake -> placebo (en anglais) ?)

placeholders -> placeholder

[int,bool,...]_constant dans integral_constant pour c++11

or_c and and_c (dans type_traits) à optimisé (ne fait pas ::value)

array_view / bounds / index peuvent remplacer totalement coordinates ?

synchronizer: une vue

un objet transaction qui dans son destructeur fait un commit si aucune exception n'est lancée, sinon un rollback (std::uncaught_exception())

comment le type interne des bucket des containers std::unordered_* ?

iterator: posibilité de compararer avec l'itérateur interne

les sfinae prennent en parametre un namespace pour y mettre les classes dependante sans pourrir le namespace d'origine

iterator_iterator (changer le nom): It,ContIts=vector<range<It>>,Cat=forward. Abstraction haut niveau du contenaire d'iterateur. La comparaison se fait comment ? sur l'ensemble des elements ou uniquement sur le dernier si le premier est vide ?

compose1, compose2, composex -> make_compose (pour le C++11). Viré les constructeurs par defaut inutiles
compose.hpp: unary_check et std::unary_function utilisés lorsque binary est attendu
forward ou pas pour l'utilisation de binary_compose et autres ? Stategie variable en fonction du type de retour des foncteurs et de la posibilité d'elision (ça va être lourd ><)

variable fonction pour les algorithmes, manipulateurs de flux, fonctions utilitaires (autre ?)

passer par des tuples quand les types internes peuvent être des structures vides

filter_type<int, float>
filter_type<???<is_integral>>
filter_type<...>::template fiter<T>::value
(mpl::filter ?)

temporary_initialized: initialize de la memoire non initiliasée (non copiable)

allocator_adapter: rebind ne change pas l'allocateur internet mais modifier les tailles demandé par allocate. Permettra d'utilisé lifo_allocator de façon simple avec un container ?

mettre des noexcept pour les fichiers dans memory

make_reverse_iterator (et rev_iter)

faire une fonction tuple_size() pour être compatible avec les tuple_like ET initializer_list

traits<template<class...>class> pour creer un parameter_index en fonction du nombre d'element

mutable_pointer et store_if = bof

limit_array

retravailler (certain sont déjà listé au-dessus)
 - bits (+ bswap_32, etc)
 - parameter
 - template
 - tpl
 - math
 - logical
 - lambda/lambda2
 - node
 - tree
 - coordinate

bit_reference et flag[_base]::reference à merger. Mettre un trait dans bit_reference et utiliser un typedef pour flag::referene

revoir les fonctions dans bit/ pour ne pas les rendre recursive. (cosntexpr pour c++14)

un stringstream (ou/et buffer) qui n'alloue pas de chaîne (utilise un cstring) (cstringstream + cstringbuf)

get_line (see proposal)

collision de range (insert,extend[r,l],rien)

delete[] en c++14 prend un size_t

la::linking(f1,f2,f3) -> f3(f2(f1(args...)))
la::propagate(f1,f2,f3) -> f1(args...),f2(args...),f3(args...)
la::compose(mk_tuple, f1,f2,f3) -> mk_tuple(f1(args...),f2(args...),f3(args...))
la::xxx(f)(a1,a2) -> f(a1),f(a2)

foncteur qui permet de différer la position des arguments (une sorte de bind en 2 étapes): xxx(<0,1,4>, a0,a1,a2)(f,a3) = f(a0,a1,a3,a2). Existe déjà ?

apply_to_tuple op::apply qui retourne une tuple (déjà dans tuple/ ?)

is_transparent_inheritance<F> pour certain foncteurs

cstring: utiliser la même interface que string_view (ou le remplacer par ?)

generic_allocator : si non trivial constructeur, utiliser constructeur parenthèsé

keep_parameter_index devrais pouvoir fonctionner avec des indice non normalisé (idem pour fn::args et fn::pack)

static_new et co: is_trivial_copy_constructor suffit avec memcpy (si les types soit différents utiliser is_trivially_constructible, is_standard_layout ? )

alg::count,find,lower_bound,etc (fonction membre ou algorithme)

simplifier les sfinae/* en passant par decltype. Y remettre is_function_callable ?

ajout de trie à bulle (pour un petit nombre d'élément) + fonction sort qui utilise trie à bulle ou std::sort (std::sort le fait déjà ?)

pas d'implementation satisfesante de deque. En faire une avec control externe du range.

{has,use,resitric}_ -> %_member ?

container associative à valeur/clef séparé (limite les miss cache)

iterator_category -> iter_cat ?

un namespace qui contient des alias sur les type communs (tt::iterator<Cont> = typename Cont::iterator ; tt::value<T> = typename T::value_type)

ne pas oublier noexcept pour les fonction swap

une fonction qui propage les éléments d'une tuple ou d'un range dans une fonction (dispatch ?)

inject(f, inject_param(',')) -> pour chaque param où le traits inject_param est validé (inject_param::template test<T>::value) ajouter ','.

macro FALCON_NOT_COPYABLE et FALCON_MOVABLE_BUT_NOT_COPYABLE
macro FALCON_COPYABLE, FALCON_MOVABLE et FALCON_COPYABLE_AND_MOVABLE
modifier c++11/assignable et le melanger avec les macros au-dessus

try_finally, except_try_finally

os << pad(T,unsigned,Char=' ') = os << width(fill(T,Char),unsigned)

dans format, ajouter un fmt_modifier pour ajouter ' ' si positif + en faire un modifier normal

format: {[pos][:[option]]} option: ' ',+,-, o,x,b,X <,>,^,= a,e,f, ., 0, % h, p, c, n
X: x + std::uppercase
<: std::left
>: std::left
^: center
=: padding after sign
e: std:scientific
E: e + std:uppercase
f: std::fixed
a: std::hexfloat = e+f
A: a + std:uppercase
.: set::setprecision
0: complète avec des 0 entre sign et valeur
%: pourcentage (*100 + '%')
h: std::noshowpoint
a: std::boolalpha
n: number of characters written
s{...}: complete avec si > n
std::fill -> c suivit d'un char ?
separateur pour les conteneurs r{...}
format_context
unsafe_format (check + format)
